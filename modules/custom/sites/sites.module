<?php

/**
 * @file
 * Integrates the PURL module directly with Context, Views, and other modules.
 */

module_load_include('inc', 'sites', 'site');
//module_load_include('context.inc', 'sites');
module_load_include('core.inc', 'sites');
module_load_include('purl.inc', 'sites');

/**
 * Implements hook_init().
 */
function sites_init() {
  if (function_exists('strongarm_set_conf')) {
    // Reset strongarm configuration.
    strongarm_set_conf(TRUE);
  }

  global $conf;
  global $language;

  // Make sure all subsite menus are valid options
  foreach (array('page', 'section', 'webform') as $type) {
    SiteController::addSiteMenus($conf['menu_options_' . $type]);
  }

  // Set current site name
  $site = SiteController::getCurrentSite();

  if (empty($site) || $site->sid == 1) {
    return;
  }

  $lang = $language->language;
  $conf['site_name'] = $site->name[$lang];
  $conf['gss_api_key'] = $site->gss_api_key[$lang];
  $settings['gss']['key'] = $site->gss_api_key[$lang];
  drupal_add_js($settings, 'setting');

}

/**
 * Implements hook_menu().
 */
function sites_menu() {
  $items['admin/structure/sites'] = array(
    'title' => 'Sites',
    'description' => 'Manage sites.',
    'page callback' => 'sites_page_admin_overview',
    'access callback' => 'user_access',
    'access arguments' => array('administer sites'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'sites.admin.inc',
  );

  $items['admin/structure/sites/add'] = array(
    'title' => 'Add site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sites_site_form'),
    'access arguments' => array('administer sites'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'sites.admin.inc',
  );

  $items['admin/structure/sites/edit/%'] = array(
    'title' => 'Edit site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sites_site_form', 4),
    'access arguments' => array('administer sites'),
    'file' => 'sites.admin.inc',
  );

  $items['admin/structure/sites/delete/%'] = array(
    'title' => 'Delete site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sites_site_delete_form', 4),
    'access arguments' => array('administer sites'),
    'file' => 'sites.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function sites_theme($existing, $type, $theme, $path) {
  return array(
    'sites_list_sites' => array(
      'variables' => array(),
      'file' => 'sites.admin.inc',
    ),
  );
}

/**
 * Implements hook_custom_theme().
 */
function sites_custom_theme() {

  if (user_access('view the administration theme') && path_is_admin(current_path())) {
    return variable_get('admin_theme');
  }

  $theme_name = SiteController::getCurrentTheme();
  if (is_string($theme_name)) {
    return $theme_name;
  }

}

/**
 * Implements hook_views_api().
 */
function sites_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'sites') . '/views',
  );
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function sites_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_features_api().
 */
function sites_features_api() {
  return array(
    'sites' => array(
      'name' => t('Sites config'),
      'default_hook' => 'sites_defaults',
      'default_file' => FEATURES_DEFAULTS_INCLUDED,
      'feature_source' => TRUE,
      'file' => drupal_get_path('module', 'sites') . '/sites.features.inc',
    ),
  );
}

/**
 * Implements hook_admin_paths().
 *
 * Adds the sites admin paths as admin paths, so the admin theme is used.
 */
function sites_admin_paths_alter(&$paths) {
  $method = variable_get('purl_method_sites', 'path');
  if ($method == 'path') {
    $paths_copy = $paths;
    $sites = SiteController::getSites();
    foreach ($paths_copy as $key => $value) {
      foreach($sites as $site) {
        $paths[$site->purl_prefix . '/' . $key] = TRUE;
      }
    }
  }
}


/**
 * Implements hook_url_outbound_alter().
 *
 * - Adds site prefix to content admin.
 * - Removes prefix from node aliases if prefix was added on node update.
 */
function sites_url_outbound_alter(&$path, &$options, $original_path) {

  // Rewrite the outbound url for node/edit and node/delete
  // TODO : Make something similar for Workbench
  if (current_path() == 'admin/content') {
    purl_disable(TRUE);
    if (!empty($options['href'])) {
      $paths = explode('/', $options['href']);
      if ($paths[0] == 'node' && ($paths[2] == 'edit' || $paths[2] == 'delete')) {
        $sites = SiteController::getSitesByNode($paths[1]);
        if (empty($sites[1])) { // Don't do anything for the main site
          $site = array_shift($sites);
          $path = $site->purl_prefix . '/' . $path;
        }
      }
    }
  }

  // Remove the purl prefix from node aliases that already have a purl prefix.
  if (stripos($path, 'node/') === 0) {
    $alias = drupal_get_path_alias($path);
    $site = SiteController::getCurrentSite();
    $parts = explode('/', $alias);
    // Only remove the prefix if the alias is already prefixed.
    if ($alias && isset($site->purl_prefix) && $parts[0] === $site->purl_prefix && count($parts) > 1) {
      array_shift($parts);
      // Set the path to the alias.
      $path = implode('/', $parts);
      // When this alias option is set to TRUE drupal will not attempt to
      // override the alias again.
      $options['alias'] = TRUE;
    }
  }
}

/**
 *  Implements hook_panels_pane_prerender
 */
function sites_panels_pane_prerender($pane) {
  $site = SiteController::getCurrentSite();

  //dpr($pane->type . ':' . print_r($pane->configuration,TRUE));

  if ($pane->type == 'menu_tree' && $site->sid > 1) {
    if ($pane->configuration['menu_name'] == 'main-menu') {
      $main_menu = sites_get_current_menu_source('main_menu');
      $pane->configuration['menu_name'] = $main_menu;
      $pane->configuration['parent'] = $main_menu . ':0';
    }
  }

}

/**
 * Implements template_preprocess_page.
 */
/*
function sites_process_page(&$vars) {
  // Some themes acquire their primary_links and secondary_links variables via
  // these variables.  For themes that do not, we have provided a Strongarm
  // implementation in sites_strongarm()
  if ($pl = sites_get_current_menu_source('main_menu')) {
    $vars['main_menu'] = module_exists('i18n_menu') ? i18n_menu_navigation_links($pl) : menu_navigation_links($pl);
  }
  if ($sl = sites_get_current_menu_source('secondary_menu')) {
    $vars['secondary_menu'] = module_exists('i18n_menu') ? i18n_menu_navigation_links($sl) : menu_navigation_links($sl);
  }
}
*/

/**
 * Implements template_preprocess_page.
 */
/*function sites_preprocess_page(&$vars) {
  $site = SiteController::getCurrentSite();
  if (!empty($site)) {
    $vars['front_page'] = url('<front>', array(
        'absolute' => TRUE,
        'purl'     => array('provider' => 'sites', 'id' => $site->sid),
      )
    );
  }
}
*/

/**
 * Implements hook_permission().
 */
function sites_permission() {
  return array(
    'administer sites' => array(
      'title' => t('Administer sites'),
    ),
  );
}

/**
 * Implements hook_user_logout().
 */
function sites_user_logout($account) {
  // Disable purl for user logout, otherwise it redirects to the same page.
  purl_disable(TRUE);
}

/**
 * Implements hook_form_alter().
 *
 */
function sites_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['type']) && isset($form['#node'])) {
    if ($form['type']['#value'] . '_node_form' == $form_id) {
      // Alter the node form: restrict the available menu options
      SiteHelper::alterNodeForm($form);
    }
  }
}

/**
 * Implements hook_node_load().
 */
function sites_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    $node->sites = SiteController::getSitesByNode($node->nid);
  }
}

/**
 * Check the implementation of hook_sites_access with the heaviest weight
 * as to whether the node should be accessible.
 *
 * @param $node
 *   Node object.
 *
 * @return
 *   Boolean.
 */
function sites_access($node) {
  // Access is based on the heaviest weighted module's response
  $modules = module_implements('sites_access');
  $last = $modules[count($modules) - 1];
  $permitted = module_invoke($last, 'sites_access', $node);

  return $permitted;
}

/**
 * Implements hook_sites_access().
 */
function sites_sites_access($node) {
  if (isset($node->sites) && count($node->sites)) {
    // make sure purl is initialized.
    // when working with domain purl processor
    // hook_access is called before purl_init()
    purl_init();
    return in_array(SiteController::getCurrentSite()->sid, array_keys($node->sites));
  }
  else {
    // allow nodes without a defined site to be accessed freely
    return TRUE;
  }
}

/**
 * Implements hook_menu_alter().
 */
function sites_menu_alter(&$items) {
  $items['node/%node']['access callback'] = 'sites_menu_access_override_node_view';
}

/**
 * Wrapper for node_access that allows site_access to preempt default node access rules.
 */
function sites_menu_access_override_node_view($op, $node) {
  if (!sites_access($node)) {
    return FALSE;
  }
  else {
    return node_access($op, $node);
  }
}

/**
 * Notify CTools that we'll be using the plugin API with Context and Strongarm modules.
 */
function sites_ctools_plugin_api($module, $api) {
  if ($module == 'context' && $api == 'plugins') {
    return array('version' => 3);
  }
}

function sites_view_access($sites = array()) {
  return in_array(SiteController::getCurrentSite()->sid, $sites);
}

/**
 * Checks if machine name is already taken.
 *
 * @param string $machine_name Machine name to check.
 * @return bool
 *  Returns TRUE if this machine name already exists.
 */
function sites_machine_name_exists($machine_name) {
  $site = SiteController::getSiteByName($machine_name);
  return !empty($site);
}



