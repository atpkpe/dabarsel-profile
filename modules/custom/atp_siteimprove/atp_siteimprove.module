<?php

/**
 * @file
 * Atp Siteimprove
 *
 * Handles Siteimprove implementation on ATP.
 *
 * @author: Mikkel Jakobsen <mikkel@adapt.dk>
 */

/**
 * Define default path exclusion list to remove tracking from admin pages.
 */
define('ATP_SITEIMPROVEPAGES', "admin\nadmin/*\nbatch\nnode/add*\nnode/*/*\nuser/*/*");

/**
 * Implements hook_help().
 */
function atp_siteimprove_help($path, $arg) {
  switch ($path) {
    case 'admin/config/system/atp_siteimprove':
      return t('<a href="@si_url">Siteimprove</a> is the only web governance software that helps you better manage and maintain your website through quality assurance, accessibility, web analytics, SEO, and response â€“ all in one tool.', array('@si_url' => 'http://www.google.com/analytics/'));
  }
}

/**
 * Implements hook_theme().
 */
function atp_siteimprove_theme() {
  return array(
    'atp_siteimprove_admin_custom_var_table' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function atp_siteimprove_permission() {
  return array(
    'administer siteimprove' => array(
      'title' => t('Administer Siteimprove'),
      'description' => t('Perform maintenance tasks for Siteimprove.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function atp_siteimprove_menu() {
  $items['admin/config/system/atp_siteimprove'] = array(
    'title' => 'Siteimprove',
    'description' => 'Configure Siteimprove.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('atp_siteimprove_admin_settings_form'),
    'access arguments' => array('administer administer siteimprove'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'atp_siteimprove.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_page_alter() to insert JavaScript to the appropriate scope/region of the page.
 */
function atp_siteimprove_page_alter(&$page) {

  $snippet = variable_get('atp_siteimprove_snippet', '');

  // 1. Check if the GA account number has a value.
  // 2. Track page views based on visibility value.
  if (!empty($snippet) && _atp_siteimprove_visibility_pages()) {

    // We allow different scopes. Default to 'header' but allow user to override if they really need to.
    $scope = variable_get('atp_siteimprove_js_scope', 'header');


    drupal_add_js($snippet, array('scope' => $scope, 'type' => 'inline'));
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function atp_siteimprove_field_extra_fields() {
  $extra['user']['user']['form']['atp_siteimprove'] = array(
    'label' => t('Google Analytics configuration'),
    'description' => t('Google Analytics module form element.'),
    'weight' => 3,
  );

  return $extra;
}

/**
 * Based on visibility setting this function returns TRUE if GA code should
 * be added to the current page and otherwise FALSE.
 */
function _atp_siteimprove_visibility_pages() {
  static $page_match;

  // Cache visibility result if function is called more than once.
  if (!isset($page_match)) {

    $visibility = variable_get('atp_siteimprove_visibility_pages', 0);
    $setting_pages = variable_get('atp_siteimprove_pages', ATP_SITEIMPROVEPAGES);

    // Match path if necessary.
    if (!empty($setting_pages)) {
      // Convert path to lowercase. This allows comparison of the same path
      // with different case. Ex: /Page, /page, /PAGE.
      $pages = drupal_strtolower($setting_pages);
      if ($visibility < 2) {
        // Convert the Drupal path to lowercase
        $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
        // Compare the lowercase internal and lowercase path alias (if any).
        $page_match = drupal_match_path($path, $pages);
        if ($path != $_GET['q']) {
          $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
        }
        // When $visibility has a value of 0, the tracking code is displayed on
        // all pages except those listed in $pages. When set to 1, it
        // is displayed only on those pages listed in $pages.
        $page_match = !($visibility xor $page_match);
      }
      else {
        $page_match = FALSE;
      }
    }
    else {
      $page_match = TRUE;
    }

  }
  return $page_match;
}

/**
 * A placeholder for debugging.
 *
 * @return string
 */
function atp_siteimprove_default_snippet() {
  return <<<EOD
<script type="text/javascript">
// Here goes the Siteimprove snippet.
</script>
EOD;
}