<?php
/**
 * @file
 * Code for the ATP SAS.
 */


define('ATP_SAS_DIAG_BROWSER_ROOT_PATH', 'profiles/atp/modules/custom/atp_sas/test');
define('ATP_SAS_DIAG_MEDIA_FOLDER_VOCAB_NAME', 'media_folders');

/**
 * implements hook_menu
 */
function atp_sas_menu() {
  $items = array();
  $items['atp-sas/insert/nojs'] = array(
    'page callback' => 'atp_sas_get_file_browser',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['atp-sas/insert/ajax'] = array(
    'delivery callback' => 'ajax_deliver',
  ) + $items['atp-sas/insert/nojs'];

  $items['atp-sas/ajax/browser/json'] = array(
    'page callback' => 'atp_sas_ajax_get_file_browser',
    'access callback' => TRUE,
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/media/sas/configuration'] = array(
    'title' => 'SAS configuration',
    'description' => 'Administer SAS configuration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('atp_sas_configuration_form'),
    'access arguments' => array('administer sas'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'atp_sas.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function atp_sas_permission() {
  return array(
    'administer sas' => array(
      'title' => t('Administer SAS configuration'),
      'description' => t('Change SAS settings.'),
    ),
  );
}

/**
 * Implements hook_filter_info().
 */
function atp_sas_filter_info() {

  $filters['atp_sas_diag_embed'] = array(
    'title' => t('Insert diagram'),
    'description' => t('By including the syntax [[sasDiag:(settings)], this filter will embed a diagram.'),
    'process callback' => '_atp_sas_diag_embed_process',
    'tips callback'  => '_atp_sas_diag_embed_tips',
    'cache' => FALSE,
  );

  return $filters;

}

function atp_sas_get_file_browser($ajax) {
  $is_ajax = $ajax === 'ajax';
  $output = array();
  $output['sas_dir_browser_wrapper'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'id' => 'sas-dir-browser-wrapper',
    ),
  );
  $output['sas_dir_browser_wrapper'] += atp_sas_ajax_get_file_browser();
  if ($is_ajax) {
    $render = render($output);
    die($render);
  }
  else {
    return $output;
  }
}

/**
 * Implements hook_wysiwyg_include_directory().
 */
function atp_sas_wysiwyg_include_directory($type) {
  return $type;
}

function atp_sas_get_dir_sctructure($dir) {
  $structure = array();
  $files = new RecursiveIteratorIterator(
    new RecursiveDirectoryIterator($dir, RecursiveDirectoryIterator::SKIP_DOTS),
    RecursiveIteratorIterator::SELF_FIRST
  );
  $files->setMaxDepth(0);

  if ($files->callHasChildren()) {
    foreach ($files as $child) {
      if ($child->isDir()) {
        $structure[] = array(
          'type' => 'dir',
          'node' => $child,
        );
      }
    }
  }
  else {
    foreach ($files as $child) {
      if ($child->isFile()) {
        $structure[] = array(
          'type' => 'file',
          'node' => $child,
        );
      }
    }
  }
  return $structure;
}

function atp_sas_ajax_get_file_browser($json = FALSE) {
  $terms = $browser_items = array();
  $vocab_name = 'media_folders';
  $current_tid = variable_get('atp_sas_media_folder_tid', 0);
  if ($current_tid == 0) {
    return array();
  }
  if (!empty($_GET['media_folder'])) {
    $current_tid = (int) $_GET['media_folder'];
  }
  $media_term = taxonomy_term_load($current_tid);
  $media_folder_vocab = taxonomy_vocabulary_machine_name_load($vocab_name);
  $term_tree = taxonomy_get_tree($media_folder_vocab->vid, $current_tid, 1);

  foreach ($term_tree as $term) {
    $terms[$term->tid] = $term;
    $browser_items[$term->tid] = array(
      'data' => l(
        $term->name,
        'atp-sas/ajax/browser/json',
        array('query' => array('media_folder' => $term->tid))
      ),
      'class' => array('sas-browser-item-dir'),
    );
  }

  // First get eventual file items.
  $file_items = _atp_document_get_media_folder_file_items($current_tid, 'sas', 'fids');
  $files_dir = variable_get('file_public_path', conf_path() . '/files');
  array_walk($file_items, function(&$file_item) use ($files_dir) {
    $file = file_load($file_item);
    $diag_id = str_replace('.xml', '', $file->filename);
    $diag = sasDiagFactory::create($diag_id, $files_dir);
    $file_item = l(
      $diag_id,
      '',
      array(
        'attributes' => array(
          'data-path' => $files_dir,
          'data-id' => $diag_id,
          'data-type' => $diag->getType(),
          'class' => array(
            'sas-browser-item-file',
          ),
        ),
      )
    );
  });

  // Get eventual directory items.
  if (!empty($file_items)) {
    $browser_items = array_merge($browser_items, $file_items);
  }
  $file_browser_button_items = array();
  $file_browser_button_items[] = array(
    'data' => l(
      t('Back'),
      'atp-sas/ajax/browser/json',
      array(
        'query' => array(
          'media_folder' => $media_term->parent[0],
        ),
        'attributes' => array(
          'class' => array(
            'sas-browser-item-dir',
          ),
        ),
      )
    ),
    'class' => array(
      'sas-browser-item-dir',
    ),
  );
  $output = array(
    'file_browser_wrapper' => array(
      '#type' => 'container',
      '#attributes' => array(
        'id' => 'sas-file-browser',
      ),
      'file_structure_wrapper' => array(
        '#type' => 'container',
        '#attributes' => array(
          'id' => 'sas-file-structure',
        ),
        'file_structure' => array(
          '#items' => $browser_items,
          '#theme' => 'item_list',
        ),
      ),
    ),
    'file_browser_buttons_wrapper' => array(
      '#type' => 'container',
      '#attributes' => array(
        'id' => 'sas-file-browser-buttons',
      ),
      'file_browser_buttons_wrapper' => array(
        '#items' => $file_browser_button_items,
        '#theme' => 'item_list',
        '#access' => $current_tid != ATP_SAS_DIAG_MEDIA_FOLDER_TID,
      ),
    ),
  );
  if ($json) {
    $output = render($output);
    drupal_json_output($output);
    die;
  }
  else {
    return $output;
  }

}

/**
 * Process callback for hook_filter.
 */
function _atp_sas_diag_embed_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  drupal_add_js('https://www.google.com/jsapi', 'external');
  return preg_replace_callback(
    '/\[\[sasDiag\|id:([^|]+)\|path:([^|]+)\|type:([^\]]+)\]\]/',
    function($m){
      $diag = sasDiagFactory::create($m[1], $m[2]);
      if (is_object($diag)) {
        $output = $diag->render();
        return render($output);
      }
      return;
    },
  $text);
}

/**
 * Tips callback for hook_filter.
 */
function _atp_sas_diag_embed_tips($filter, $format, $long) {
  return t('[[sasDiag|id:(xml file name without extension)|path:(path to xml file)|type:(type of diagram)]] - Insert a diagram.');
}

/**
 * Implements hook_js_alter().
 */
function atp_sas_js_alter(&$js) {
  foreach ($js as $k => &$v) {
    if ($k == 'https://www.google.com/jsapi') {
      $v['weight'] = -1000;
    }
  }
}
