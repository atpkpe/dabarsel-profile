<?php
/**
 * @file
 * ATP install file.
 */

 /**
 * Implements hook_install().
 */
function atp_install() {

  // Enable the profile specific theme.
  theme_enable(array('atp_theme','adminimal'));
  theme_disable(array('bartik'));
  variable_set('theme_default', 'atp_theme');
  // Disables the menu_trail_by_path module
  // For some reason it cannot be deactivated in the makefile
  module_disable(array('menu_trail_by_path','googleanalytics'));
  drupal_uninstall_modules(array('menu_trail_by_path','googleanalytics'));

  atp_create_users();
  atp_add_translations();
  atp_tam_mappings();

}

function atp_add_translations() {

  $translations = array(
    "Contacts" => "Kontakter",
    "Create content" => "TilfÃ¸j indhold",
    "Gallery" => "Galleri",
    "More shortcuts" => "Flere genveje",
    "My content" => "Mit indhold",
    "My drafts" => "Mine kladder",
    "My Profile" => "Min Profil",
    "My sections" => "Mine sites",
    "My Workbench" => "Workbench",
    "Needs review" => "Klar til godkendelse",
    "News" => "Nyhed",
    "Panelizer" => "Skabeloner",
    "Summary" => "Manchet",
    "Text formatting help" => "Tekstformat",
    'Facts' => 'Linkbokse',
  );

  foreach ($translations as $source => $translation) {
    atp_add_translation($source, $translation);
  }

}

/**
 * [Helper function to be used by update fundtions]
 * @param  [type] $source      [the source string]
 * @param  [type] $translation [the translated string]
 */
function atp_add_translation($source, $translation, $langcode = 'da') {
  $report = array('skips'=>0, 'updates'=>0, 'deletes'=>0, 'additions'=>0 );
  $textgroup = 'default'; // field , node, default, menu ...
  $mode = LOCALE_IMPORT_OVERWRITE; // LOCALE_IMPORT_KEEP
  $location = '';
  _locale_import_one_string_db($report, $langcode, $context, $source, $translation, $textgroup, $location, $mode);
}

function atp_tam_mappings() {

  $mappings = array(
    'DRUPAL_EMPLOYEE' => 'Employee',
    'DRUPAL_AUTHOR' => 'Author',
    'DRUPAL_EDITOR' => 'Editor',
    'DRUPAL_EXTENDED_LAYOUT' => 'Extended layout',
    'DRUPAL_IT_OPS' => 'IT-ops',
    'DRUPAL_SITE_ADMINISTRATOR' => 'Site administrator',
    'DRUPAL_ATP' => 'atp.dk',
    'DRUPAL_ATP_UDBUD' => 'atp-udbud',
    'DRUPAL_DESIGNMANUAL' => 'designmanual',
    'DRUPAL_VELKOMMEN_HK' => 'velkommen-hk',
    'DRUPAL_VELKOMMEN_IT' => 'velkommen-it',
    'DRUPAL_VELKOMMEN_INDIVIDUEL' => 'velkommen-individuel',
    'DRUPAL_ATP_ALTERNATIVE_INVESTMENTS' => 'atp-alternative-investments',
    'DRUPAL_ATP_TIMBERLAND_INVEST' => 'atp-timberland-invest',
    'DRUPAL_ATP_ALPHA' => 'atp-alpha',
    'DRUPAL_VELKOMMEN_DJOEF_MAGISTRE' => 'velkommen-djoef-magistre',
  );

  variable_set('tamauth_redirect', 'user' );
  variable_set('tamauth_map_roles', $mappings);

}


function atp_create_users() {

  $author_role = user_role_load_by_name('Author');
  $editor_role = user_role_load_by_name('Editor');
  $extended_role = user_role_load_by_name('Extended layout');
  $atp_role = user_role_load_by_name('atp.dk');

  // Create author user
  $roles = array($author_role->rid => $author_role->rid, $atp_role->rid => $atp_role->rid);
  $edit = array();
  $edit['name']   = 'author';
  $edit['mail']   = 'tom+author@adapt.dk';
  $edit['roles']  = $roles;
  $edit['pass']   = 'QRbYRmppxcnH';
  $edit['status'] = 1;
  $account = user_save(drupal_anonymous_user(), $edit);

  // Create author+editor user
  $roles[$editor_role->rid] = $editor_role->rid;
  $edit = array();
  $edit['name']   = 'editor';
  $edit['mail']   = 'tom+editor@adapt.dk';
  $edit['roles']  = $roles;
  $edit['pass']   = 'GFDRF4sdxcnf';
  $edit['status'] = 1;
  $account = user_save(drupal_anonymous_user(), $edit);

  // Create author+editor+advanced layout user
  $roles[$extended_role->rid] = $extended_role->rid;
  $edit = array();
  $edit['name']   = 'extended';
  $edit['mail']   = 'tom+extended@adapt.dk';
  $edit['roles']  = $roles;
  $edit['pass']   = 'KJSDtert4dFHJ';
  $edit['status'] = 1;
  $account = user_save(drupal_anonymous_user(), $edit);

  // Add users from the atp.dk role to workbench access realm "atp"
  workbench_access_role_section_save($atp_role->rid, 1, 'taxonomy');

}

/**
 *  Enable ultimate_cron module
 */
function atp_update_7001(&$sandbox) {
   module_enable(array('ultimate_cron'));
}

/**
 *  Add some translation strings
 */
function atp_update_7002(&$sandbox) {
  atp_add_translation('More shortcuts', 'Flere genveje');
  atp_add_translation("default for '@bundle'", 'standard');
}

/**
 *  Enable media_qbrick module
 */
function atp_update_7003(&$sandbox) {
   module_enable(array('media_qbrick'));
}

/**
 *  Enable sites_last
 */
function atp_update_7004(&$sandbox) {
   module_enable(array('sites_last'));
}

/**
 *  Enable injector modules: css_injector and js_injector.
 *
 * @author Mikkel Jakobsen <mikkel@adapt.dk>
 */
function atp_update_7005(&$sandbox) {
  module_enable(array(
    'css_injector',
    'js_injector',
  ));
}

/**
 *  Enable adapt_ckeditor_widgets.
 */
function atp_update_7006(&$sandbox) {
  module_enable(array('adapt_ckeditor_widgets'));
}

/**
 *  Enable wysiwyg_filter.
 */
function atp_update_7007(&$sandbox) {
  module_enable(array('wysiwyg_filter'));
}

/**
 * ATP-43 - Notifikation (K38)
 * Activating notification related modules.
 *
 * @author Mikkel Jakobsen <mikkel@adapt.dk>
 */
function atp_update_7008(&$sandbox) {
  module_enable(array(
    'node_expire',
    'node_expire_extras',
    'flag',
    'flag_actions',
    'better_exposed_filters',
    'rules',
    'atp_notifications',
  ));
}

/**
 *  Enable smtp.
 */
function atp_update_7009(&$sandbox) {
  module_enable(array('smtp'));
}

/**
 * Enable Linkchecker
 */
function atp_update_7010(&$sandbox) {
  module_enable(array('linkchecker'));
}

/**
 * Enable syslog
 */
function atp_update_7011(&$sandbox) {
  module_enable(array('syslog'));
}

/**
 * Enable ATP log module.
 */
function atp_update_7012(&$sandbox) {
  module_enable(array('atp_log'));
}

/**
 * Enable metatag module.
 */
function atp_update_7013(&$sandbox) {
  module_enable(array('metatag'));
}

/**
 * Enable atp_login and tamauth module.
 */
function atp_update_7014(&$sandbox) {
  module_enable(array('tamauth','atp_login'));
  atp_tam_mappings();
}

/**
 * Enable metatag ATP views.
 */
function atp_update_7015(&$sandbox) {
  module_enable(array('atp_views'));
}

/**
 * Enable Fast Permissions Administration module.
 */
function atp_update_7016(&$sandbox) {
  module_enable(array('fpa'));
}

/**
 * Enable Wysiwyg entity embed
 */
function atp_update_7017(&$sandbox) {
  module_enable(array('wysiwyg_entity_embed', 'atp_entity_embed'));
}

/**
 * ATP-204 - Document archive (K38)
 * Making it work.
 *
 * @author Mikkel Jakobsen <mikkel@adapt.dk>
 */
function atp_update_7018(&$sandbox) {
  module_enable(array(
    'atp_document',
  ));
}

/**
 * ATP-Enable ckeditor link file
 */
function atp_update_7019(&$sandbox) {
  module_enable(array('ckeditor_link_file'));
}

/**
 * Enable Translation management module
 */
function atp_update_7020(&$sandbox) {
  module_enable(array('tmgmt_node_ui', 'tmgmt_field', 'tmgmt_node', 'tmgmt_local', 'actions_permissions', 'tmgmt_file', 'atp_content_translation'));
}

/**
 * ATP-203 Enable views_rss to expose news feeds.
 *
 * @author Mikkel Jakobsen <mikkel@adapt.dk>
 */
function atp_update_7021(&$sandbox) {
  module_enable(array('views_rss'));
}

/**
 * ATP-469 Add atp_faktum content type and migrate content.
 *
 * @author Martin Ricken <martin.ricken@adapt.dk>
 */
function atp_update_7022(&$sandbox) {
  if (!isset($sandbox['progress'])) {
    module_enable(array('atp_fields', 'atp_faktum'));

    $term_list = taxonomy_get_term_by_name('Faktum', 'news_categories');
    $sandbox['faktum_term'] = reset($term_list);

    $efq = new EntityFieldQuery();
    $efq->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'news')
      ->fieldCondition('field_news_categories', 'tid', $sandbox['faktum_term']->tid);

    $max = $efq->count()->execute();

    $sandbox['progress'] = 0;
    $sandbox['max'] = $max;
  }

  $limit = 10;

  $efq = new EntityFieldQuery();
  $efq->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'news')
    ->fieldCondition('field_news_categories', 'tid', $sandbox['faktum_term']->tid)
    ->range($sandbox['progress'], $limit);

  $entities = $efq->execute();

  foreach ($entities['node'] AS $node) {
    $node = entity_load_single('node', $node->nid);

    $faktum = array('type' => 'faktum');
    $faktum['title_field'] = $node->title_field;
    $faktum['field_published_date'] = $node->field_news_publishdate;
    $faktum['field_faktum_summary'] = $node->field_news_summary;
    $faktum['field_faktum_body'] = $node->field_news_body;
    $faktum['sites'] = $node->sites;
    $faktum['name'] = $node->name;
    $faktum['uid'] = $node->uid;
    $faktum['title_original'] = $node->title_original;
    $faktum['created'] = $node->created;
    $faktum['changed'] = $node->changed;
    $faktum['language'] = $node->language;
    $faktum['status'] = $node->status;

    $faktum = entity_metadata_create_node($faktum);
    $sandbox['progress']++;
    $faktum = entity_save('node', $faktum);

    entity_delete('node', $node->nid);
  }

  $sandbox['#finished'] = ($sandbox['progress'] == $sandbox['max']) ? 1 : $sandbox['progress'] / $sandbox['max'];
}

/**
 * ATP-469 Move data from field_news_publishedate to field_published_date.
 *
 * @author Martin Ricken <martin.ricken@adapt.dk>
 */
function atp_update_7023(&$sandbox) {
  if (!isset($sandbox['progress'])) {
    $efq = new EntityFieldQuery();
    $efq->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'news');

    $max = $efq->count()->execute();

    $sandbox['progress'] = 0;
    $sandbox['max'] = $max;
  }

  $limit = 10;

  $efq = new EntityFieldQuery();
  $efq->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'news')
    ->range($sandbox['progress'], $limit);

  $entities = $efq->execute();

  foreach ($entities['node'] AS $node) {
    $node = entity_load_single('node', $node->nid);
    $node->field_published_date = $node->field_news_publishdate;

    entity_save('node', $node);
    $sandbox['progress']++;
  }

  $sandbox['#finished'] = ($sandbox['progress'] == $sandbox['max']) ? 1 : $sandbox['progress'] / $sandbox['max'];

  if ($sandbox['#finished'] == 1) {
    //field_delete_field('field_news_publishdate');
  }
}

/**
 * ATP-366 enable path_breadcrumbs module.
 *
 * @author Martin Ricken <martin.ricken@adapt.dk>
 */
function atp_update_7024(&$sandbox) {
  module_enable(array('path_breadcrumbs'));
}

/**
 * ATP-463 enable js and atp_important_message modules.
 *
 * @author Tom Helmer Hansen <tom@adapt.dk>
 */
function atp_update_7025(&$sandbox) {
  module_enable(array('js','atp_important_message'));
}

/**
 * ATP-469 Update all faktum and set panelizer default.
 *
 * @author Martin Ricken <martin.ricken@adapt.dk>
 */
function atp_update_7026(&$sandbox) {
  $efq = new EntityFieldQuery();
  $efq->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'faktum');

  $entities = $efq->execute();

  foreach ($entities['node'] AS $node) {

    if (empty($node->panelizer)) {
      $default = new stdClass();
      $default->entity_type = 'node';
      $default->entity_id = $node->nid;
      $default->revision_id = $node->vid;
      $default->name = 'node:faktum:standard_2_col:default';
      $default->no_blocks = 0;
      $default->css_id = '';
      $default->pipeline = 'standard';
      $default->contexts = array();
      $default->relationships = array();
      $default->did = 0;
      $default->view_mode = 'default';
      $default->css_class = '';
      $default->title_element = 'H2';
      $default->link_to_entity = 1;
      $default->extra = array();

      drupal_write_record('panelizer_entity', $default);
    }
  }
}

/**
 * ATP-386 Move data from field_news_publishedate to field_published_date and delete old field.
 *
 * @author Martin Ricken <martin.ricken@adapt.dk>
 */
function atp_update_7027(&$sandbox) {
  if (!isset($sandbox['progress'])) {
    $efq = new EntityFieldQuery();
    $efq->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'news');

    $max = $efq->count()->execute();

    $sandbox['progress'] = 0;
    $sandbox['max'] = $max;
  }

  $limit = 10;

  $efq = new EntityFieldQuery();
  $efq->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'news')
    ->range($sandbox['progress'], $limit);

  $entities = $efq->execute();

  foreach ($entities['node'] AS $node) {
    $node = node_load($node->nid);
    $node->field_published_date = $node->field_news_publishdate;

    node_save($node);
    $sandbox['progress']++;
  }

  $sandbox['#finished'] = ($sandbox['progress'] == $sandbox['max']) ? 1 : $sandbox['progress'] / $sandbox['max'];

  if ($sandbox['#finished'] == 1) {
    field_delete_field('field_news_publishdate');
  }
}

/**
 * ATP-469 add title to node table for all faktum node types.
 *
 * @author Martin Ricken <martin.ricken@adapt.dk>
 */
function atp_update_7028(&$sandbox) {
  $efq = new EntityFieldQuery();
  $efq->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'faktum');

  $entities = $efq->execute();

  foreach ($entities['node'] AS $node) {
    $node = node_load($node->nid);

    $lang = 'da';
    if (!isset($node->title_field[$lang])) {
      $lang = 'und';
    }

    $node->title = $node->title_field[$lang][0]['safe_value'];

    node_save($node);
  }
}

/**
 * ATP-20 enable expire module.
 *
 * @author Tom Helmer Hansen <tom@adapt.dk>
 */
function atp_update_7029(&$sandbox) {
  module_enable(array('expire'));
}

/**
 * ATP-512 enable site_map module.
 *
 * @author Tom Helmer Hansen <tom@adapt.dk>
 */
function atp_update_7030(&$sandbox) {
  module_enable(array('site_map'));
}

/**
 * ATP-507 enable site_map module.
 *
 * @author Frank Hansen <frank@adapt.dk>
 */
function atp_update_7031(&$sandbox) {
  module_enable(array('cs_adaptive_image'));
}

/**
 * ATP-496 enable menu_position module.
 *
 * @author Martin Ricken <martin.ricken@adapt.dk>
 */
function atp_update_7032(&$sandbox) {
  module_enable(array('menu_position'));
}

/**
 * ATP-496 Add menu position items
 *
 * @author Martin Ricken <martin.ricken@adapt.dk>
 */
function atp_update_7033(&$sandbox) {
  module_load_include('inc', 'menu_position', 'menu_position.admin');

  $rules = array();
  $rules[] = array(
    'rid' => '',
    'admin_title' => 'Faktum',
    'plid' => 'menu-top:1481',
    'content_type' => array('faktum' => 'faktum'),
    'conditions' => array(
      'content_type' => array(
        'content_type' => array('faktum' => 'faktum')
      )
    )
  );

  $rules[] = array(
    'rid' => '',
    'admin_title' => 'Nyhed',
    'plid' => 'menu-top:1475',
    'content_type' => array('news' => 'news'),
    'conditions' => array(
      'content_type' => array(
        'content_type' => array('news' => 'news')
      )
    )
  );

  foreach ($rules AS $rule) {
    $form_state = array('values' => $rule);
    drupal_form_submit('menu_position_rule_form', $form_state);
  }
}

/**
 * ATP-496 disable path_breadcrumbs module.
 *
 * @author Martin Ricken <martin.ricken@adapt.dk>
 */
function atp_update_7034(&$sandbox) {
  module_disable(array('path_breadcrumbs'));
  drupal_uninstall_modules(array('path_breadcrumbs'));
}

/**
 * ATP-20 change scheduler module.
 *
 * @author Tom Helmer Hansen <tom@adapt.dk>
 */
function atp_update_7035(&$sandbox) {
  module_disable(array('scheduler_workbench','scheduler'));
  drupal_uninstall_modules(array('scheduler_workbench','scheduler'));
  module_enable(array('workbench_scheduler'));
}

/**
 * ATP-262, disable tgmt module.
 *
 * @author Tom Helmer Hansen <tom@adapt.dk>
 */
function atp_update_7036(&$sandbox) {
  module_disable(array('tmgmt','atp_content_translation'));
  drupal_uninstall_modules(array('tmgmt','atp_content_translation'));
}
